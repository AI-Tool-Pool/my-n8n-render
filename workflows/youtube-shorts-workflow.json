{
    "name": "YouTube Shorts Story Generator",
    "nodes": [
        {
            "parameters": {
                "rule": {
                    "interval": [
                        {
                            "field": "hours",
                            "hoursInterval": 6
                        }
                    ]
                }
            },
            "id": "trigger-schedule",
            "name": "Schedule Trigger",
            "type": "n8n-nodes-base.scheduleTrigger",
            "typeVersion": 1.1,
            "position": [
                240,
                300
            ]
        },
        {
            "parameters": {
                "functionCode": "// Generate story ideas based on trending topics\nconst storyPrompts = [\n  \"A day in the life of a time traveler who can only go back 24 hours\",\n  \"What happens when AI becomes self-aware in a smart home\",\n  \"The last person on Earth discovers they're not actually alone\",\n  \"A world where emotions are currency and you're running out\",\n  \"Someone finds a phone that can call any version of themselves\",\n  \"The story of the person who has to reset the universe every day\",\n  \"What if gravity worked differently for just one person\",\n  \"A library where books write themselves based on visitors' thoughts\",\n  \"The janitor who accidentally becomes the most powerful person alive\",\n  \"A world where memories can be traded like collectible cards\"\n];\n\nconst selectedPrompt = storyPrompts[Math.floor(Math.random() * storyPrompts.length)];\n\n// Generate story structure\nconst storyStructure = {\n  title: selectedPrompt,\n  hook: \"Generate an attention-grabbing opening that immediately draws viewers in\",\n  segments: [\n    {\n      id: 1,\n      text: \"Opening hook - introduce the main concept in an intriguing way\",\n      duration: 3,\n      image_prompt: `${selectedPrompt} - opening scene, cinematic, dramatic lighting`\n    },\n    {\n      id: 2,\n      text: \"Build tension - show the conflict or challenge\",\n      duration: 4,\n      image_prompt: `${selectedPrompt} - conflict scene, tension, dramatic moment`\n    },\n    {\n      id: 3,\n      text: \"Climax - the most exciting or surprising moment\",\n      duration: 4,\n      image_prompt: `${selectedPrompt} - climax scene, action, intense moment`\n    },\n    {\n      id: 4,\n      text: \"Resolution - wrap up with a satisfying or thought-provoking ending\",\n      duration: 3,\n      image_prompt: `${selectedPrompt} - resolution scene, conclusion, emotional impact`\n    }\n  ],\n  total_duration: 14,\n  target_audience: \"General audience interested in sci-fi and fantasy stories\",\n  style: \"Engaging, fast-paced, visually striking\"\n};\n\nreturn {\n  story_structure: storyStructure,\n  timestamp: new Date().toISOString(),\n  workflow_id: $('Schedule Trigger').first().json.id || 'manual-trigger'\n};"
            },
            "id": "story-generator",
            "name": "Story Generator",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
                460,
                300
            ]
        },
        {
            "parameters": {
                "url": "https://api.openai.com/v1/chat/completions",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "openAiApi",
                "options": {},
                "requestMethod": "POST",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Authorization",
                            "value": "Bearer {{$credentials.openAiApi.apiKey}}",
                            "description": ""
                        },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"model\",\n              \"value\": \"gpt-4\"\n            },\n            {\n              \"name\": \"messages\",\n              \"value\": \"={{ [{ role: 'system', content: 'You are a creative storyteller specializing in YouTube Shorts. Create engaging, concise narratives that capture attention immediately and maintain interest throughout.' }, { role: 'user', content: `Create a detailed script for a YouTube Short based on this concept: ${$json.story_structure.title}. The story should be exactly 4 segments, each 3-4 sentences long. Make it engaging, visual, and perfect for a 15-second video format. Include specific visual descriptions for each segment.` }] }}\"\n            },\n            {\n              \"name\": \"max_tokens\",\n              \"value\": 1000\n            },\n            {\n              \"name\": \"temperature\",\n              \"value\": 0.8\n            }\n          ]\n        }\n      },\n      \"id\": \"script-generator\",\n      \"name\": \"Script Generator (OpenAI)\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [\n        680,\n        300\n      ]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Parse OpenAI response and structure the script\\nconst openaiResponse = $json;\\nconst scriptContent = openaiResponse.choices[0].message.content;\\n\\n// Extract the story structure from previous node\\nconst storyStructure = $('Story Generator').first().json.story_structure;\\n\\n// Parse the script into segments\\nconst segments = scriptContent.split('\\\\n\\\\n').filter(segment => segment.trim().length > 0);\\n\\n// Create structured segments with script content\\nconst structuredSegments = storyStructure.segments.map((segment, index) => {\\n  const scriptText = segments[index] || `Segment ${index + 1}: ${segment.text}`;\\n  \\n  return {\\n    id: segment.id,\\n    script_text: scriptText.replace(/^(Segment \\\\d+:|Scene \\\\d+:)/i, '').trim(),\\n    image_prompt: segment.image_prompt,\\n    duration: segment.duration,\\n    sequence: index + 1\\n  };\\n});\\n\\n// Calculate total script length\\nconst totalWords = structuredSegments.reduce((total, segment) => {\\n  return total + segment.script_text.split(' ').length;\\n}, 0);\\n\\nreturn {\\n  story_title: storyStructure.title,\\n  segments: structuredSegments,\\n  metadata: {\\n    total_segments: structuredSegments.length,\\n    total_duration: storyStructure.total_duration,\\n    total_words: totalWords,\\n    style: storyStructure.style,\\n    target_audience: storyStructure.target_audience,\\n    generated_at: new Date().toISOString()\\n  },\\n  raw_script: scriptContent\\n};\"\n      },\n      \"id\": \"script-parser\",\n      \"name\": \"Script Parser\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [\n        900,\n        300\n      ]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://your-modal-endpoint.modal.run/generate-story-images\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"story_segments\",\n              \"value\": \"={{ $json.segments.map(segment => ({ prompt: segment.image_prompt, segment_id: segment.id })) }}\"\n            }\n          ]\n        },\n        \"options\": {\n          \"timeout\": 120000\n        }\n      },\n      \"id\": \"image-generator\",\n      \"name\": \"Generate Images (Modal)\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [\n        1120,\n        300\n      ]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://your-modal-endpoint.modal.run/generate-story-narration\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"story_segments\",\n              \"value\": \"={{ $('Script Parser').first().json.segments.map(segment => ({ text: segment.script_text, segment_id: segment.id })) }}\"\n            },\n            {\n              \"name\": \"voice\",\n              \"value\": \"en\"\n            },\n            {\n              \"name\": \"speed\",\n              \"value\": 1.1\n            },\n            {\n              \"name\": \"pause_between_segments\",\n              \"value\": 0.3\n            }\n          ]\n        },\n        \"options\": {\n          \"timeout\": 180000\n        }\n      },\n      \"id\": \"tts-generator\",\n      \"name\": \"Generate Narration (Modal)\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [\n        1120,\n        500\n      ]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Combine images and audio data for video assembly\\nconst imageData = $('Generate Images (Modal)').first().json;\\nconst audioData = $('Generate Narration (Modal)').first().json;\\nconst scriptData = $('Script Parser').first().json;\\n\\nif (!imageData.success || !audioData.success) {\\n  throw new Error('Image or audio generation failed');\\n}\\n\\n// Create video segments by combining images, audio, and text\\nconst videoSegments = scriptData.segments.map((segment, index) => {\\n  const imageSegment = imageData.images.find(img => img.segment_index === index);\\n  const audioSegment = audioData.segments.find(audio => audio.segment_index === index);\\n  \\n  if (!imageSegment || !audioSegment) {\\n    throw new Error(`Missing data for segment ${index + 1}`);\\n  }\\n  \\n  return {\\n    image_base64: imageSegment.image_base64,\\n    audio_base64: audioSegment.audio_base64,\\n    text: segment.script_text,\\n    duration: audioSegment.duration_seconds || segment.duration,\\n    transition: index === 0 ? 'none' : 'fade'\\n  };\\n});\\n\\n// Prepare video assembly request\\nconst videoRequest = {\\n  segments: videoSegments,\\n  title: scriptData.story_title,\\n  output_format: 'mp4',\\n  fps: 30,\\n  quality: 'high'\\n};\\n\\nreturn {\\n  video_request: videoRequest,\\n  metadata: {\\n    total_segments: videoSegments.length,\\n    total_duration: videoSegments.reduce((sum, seg) => sum + seg.duration, 0),\\n    story_title: scriptData.story_title,\\n    generated_at: new Date().toISOString()\\n  }\\n};\"\n      },\n      \"id\": \"video-combiner\",\n      \"name\": \"Video Data Combiner\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1340,\n        400\n      ]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://your-modal-endpoint.modal.run/assemble-video\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"segments\",\n              \"value\": \"={{ $json.video_request.segments }}\"\n            },\n            {\n              \"name\": \"title\",\n              \"value\": \"={{ $json.video_request.title }}\"\n            },\n            {\n              \"name\": \"output_format\",\n              \"value\": \"mp4\"\n            },\n            {\n              \"name\": \"fps\",\n              \"value\": 30\n            },\n            {\n              \"name\": \"quality\",\n              \"value\": \"high\"\n            }\n          ]\n        },\n        \"options\": {\n          \"timeout\": 300000\n        }\n      },\n      \"id\": \"video-assembler\",\n      \"name\": \"Assemble Video (Modal)\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [\n        1560,\n        400\n      ]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://qflapwllxftcsdukoals.supabase.co\",\n        \"authentication\": \"genericCredentialType\",\n        \"genericAuthType\": \"httpHeaderAuth\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"Authorization\",\n              \"value\": \"Bearer {{$credentials.supabase.serviceRoleKey}}\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            },\n            {\n              \"name\": \"Prefer\",\n              \"value\": \"return=representation\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"bodyParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"title\",\n              \"value\": \"={{ $('Video Data Combiner').first().json.metadata.story_title }}\"\n            },\n            {\n              \"name\": \"video_data\",\n              \"value\": \"={{ $json.video_base64 }}\"\n            },\n            {\n              \"name\": \"duration\",\n              \"value\": \"={{ $('Video Data Combiner').first().json.metadata.total_duration }}\"\n            },\n            {\n              \"name\": \"segments_count\",\n              \"value\": \"={{ $('Video Data Combiner').first().json.metadata.total_segments }}\"\n            },\n            {\n              \"name\": \"created_at\",\n              \"value\": \"={{ new Date().toISOString() }}\"\n            },\n            {\n              \"name\": \"status\",\n              \"value\": \"completed\"\n            },\n            {\n              \"name\": \"metadata\",\n              \"value\": \"={{ JSON.stringify($('Video Data Combiner').first().json.metadata) }}\"\n            }\n          ]\n        },\n        \"uri\": \"/rest/v1/youtube_shorts\"\n      },\n      \"id\": \"supabase-storage\",\n      \"name\": \"Store in Supabase\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [\n        1780,\n        400\n      ]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$credentials.mongodb.connectionString}}\",\n        \"operation\": \"insert\",\n        \"collection\": \"Videos\",\n        \"fields\": \"title,video_data,duration,segments_count,created_at,status,metadata,workflow_id\",\n        \"options\": {}\n      },\n      \"id\": \"mongodb-storage\",\n      \"name\": \"Store in MongoDB\",\n      \"type\": \"n8n-nodes-base.mongoDb\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1780,\n        600\n      ]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Generate YouTube metadata and prepare for upload\\nconst videoData = $('Assemble Video (Modal)').first().json;\\nconst scriptData = $('Script Parser').first().json;\\n\\nif (!videoData.success) {\\n  throw new Error('Video assembly failed');\\n}\\n\\n// Generate YouTube title (max 100 characters)\\nconst title = scriptData.story_title.length > 97 ? \\n  scriptData.story_title.substring(0, 97) + '...' : \\n  scriptData.story_title;\\n\\n// Generate description\\nconst description = `${scriptData.raw_script}\\n\\n#Shorts #Story #AI #Creative #Entertainment\\n\\nGenerated with AI for entertainment purposes.\\n\\nTags: storytelling, creative content, short stories, AI generated`;\\n\\n// Generate tags\\nconst tags = [\\n  'shorts',\\n  'story',\\n  'creative',\\n  'entertainment',\\n  'ai',\\n  'storytelling',\\n  'short stories',\\n  'viral',\\n  'trending'\\n];\\n\\nreturn {\\n  youtube_metadata: {\\n    title: title,\\n    description: description,\\n    tags: tags,\\n    category: '24', // Entertainment\\n    privacy: 'public',\\n    thumbnail_time: '00:00:02'\\n  },\\n  video_base64: videoData.video_base64,\\n  video_metadata: videoData.metadata,\\n  upload_ready: true,\\n  generated_at: new Date().toISOString()\\n};\\n\"\n      },\n      \"id\": \"youtube-metadata\",\n      \"name\": \"YouTube Metadata Generator\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [\n        2000,\n        400\n      ]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Error handling and retry logic\\nconst currentNode = $node;\\nconst executionData = $execution;\\n\\n// Check if this is a retry\\nconst retryCount = $json.retry_count || 0;\\nconst maxRetries = 3;\\n\\nif (retryCount >= maxRetries) {\\n  // Send error notification\\n  return {\\n    error: 'Maximum retries exceeded',\\n    retry_count: retryCount,\\n    timestamp: new Date().toISOString(),\\n    send_notification: true\\n  };\\n}\\n\\n// Log the error\\nconsole.error('Workflow error:', $json.error);\\n\\n// Prepare retry data\\nreturn {\\n  retry_count: retryCount + 1,\\n  error: $json.error,\\n  retry_at: new Date(Date.now() + (retryCount + 1) * 30000).toISOString(), // Exponential backoff\\n  original_data: $json\\n};\"\n      },\n      \"id\": \"error-handler\",\n      \"name\": \"Error Handler\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1340,\n        700\n      ]\n    },\n    {\n      \"parameters\": {\n        \"to\": \"robertmcasper@gmail.com\",\n        \"subject\": \"YouTube Shorts Workflow Error\",\n        \"message\": \"=An error occurred in the YouTube Shorts generation workflow:\\n\\nError: {{ $json.error }}\\nRetry Count: {{ $json.retry_count }}\\nTimestamp: {{ $json.timestamp }}\\n\\nPlease check the n8n workflow for details.\",\n        \"options\": {}\n      },\n      \"id\": \"error-notification\",\n      \"name\": \"Send Error Email\",\n      \"type\": \"n8n-nodes-base.emailSend\",\n      \"typeVersion\": 2,\n      \"position\": [\n        1560,\n        700\n      ]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Success notification and metrics\\nconst videoData = $('Assemble Video (Modal)').first().json;\\nconst metadata = $('Video Data Combiner').first().json.metadata;\\n\\nreturn {\\n  success: true,\\n  message: 'YouTube Short generated successfully',\\n  video_title: metadata.story_title,\\n  duration: metadata.total_duration,\\n  segments: metadata.total_segments,\\n  file_size: videoData.metadata?.size_bytes || 'unknown',\\n  generated_at: new Date().toISOString(),\\n  workflow_completed: true\\n};\"\n      },\n      \"id\": \"success-handler\",\n      \"name\": \"Success Handler\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [\n        2220,\n        400\n      ]\n    }\n  ],\n  \"connections\": {\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Story Generator\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Story Generator\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Script Generator (OpenAI)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Script Generator (OpenAI)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Script Parser\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Script Parser\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Generate Images (Modal)\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Generate Narration (Modal)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Images (Modal)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Video Data Combiner\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Generate Narration (Modal)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Video Data Combiner\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Video Data Combiner\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Assemble Video (Modal)\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Assemble Video (Modal)\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Store in Supabase\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Store in MongoDB\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"YouTube Metadata Generator\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Store in Supabase\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Success Handler\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"YouTube Metadata Generator\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Success Handler\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Error Handler\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Error Email\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"tags\": [\n    {\n      \"createdAt\": \"2025-01-09T10:00:00.000Z\",\n      \"updatedAt\": \"2025-01-09T10:00:00.000Z\",\n      \"id\": \"youtube-shorts\",\n      \"name\": \"YouTube Shorts\"\n    },\n    {\n      \"createdAt\": \"2025-01-09T10:00:00.000Z\",\n      \"updatedAt\": \"2025-01-09T10:00:00.000Z\",\n      \"id\": \"ai-content\",\n      \"name\": \"AI Content\"\n    },\n    {\n      \"createdAt\": \"2025-01-09T10:00:00.000Z\",\n      \"updatedAt\": \"2025-01-09T10:00:00.000Z\",\n      \"id\": \"automation\",\n      \"name\": \"Automation\"\n    }\n  ],\n  \"triggerCount\": 1,\n  \"updatedAt\": \"2025-01-09T10:00:00.000Z\",\n  \"versionId\": \"1\"\n}