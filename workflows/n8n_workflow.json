{
  "name": "Jewelry Image Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "jewelry-processing",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract data from webhook\nconst jobId = $input.item.json.job_id;\nconst imagePath = $input.item.json.image_path;\nconst results = $input.item.json.results;\n\n// Create output\nreturn {\n  jobId,\n  imagePath,\n  results,\n  timestamp: new Date().toISOString(),\n  status: 'processing'\n};"
      },
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.results.error }}",
              "operation": "exists"
            }
          ]
        }
      },
      "name": "Error Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process error\nreturn {\n  jobId: $input.item.json.jobId,\n  status: 'error',\n  error: $input.item.json.results.error,\n  timestamp: $input.item.json.timestamp\n};"
      },
      "name": "Handle Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        850,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process successful results\nconst results = $input.item.json.results;\n\n// Extract key information\nreturn {\n  jobId: $input.item.json.jobId,\n  status: 'success',\n  timestamp: $input.item.json.timestamp,\n  imagePath: $input.item.json.imagePath,\n  title: results.optimized_listing?.title || '',\n  description: results.optimized_listing?.description || '',\n  price: results.optimized_listing?.price_range || '',\n  materials: results.optimized_listing?.materials || '',\n  keywords: results.keywords || [],\n  seoScore: results.seo_data?.seo_score?.score || 0,\n  outputDir: results.output_dir || ''\n};"
      },
      "name": "Process Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        850,
        400
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "jewelry_processing_jobs",
        "columns": "jobId, status, timestamp, error",
        "additionalFields": {}
      },
      "name": "Save Error to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1050,
        200
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "jewelry_processing_jobs",
        "columns": "jobId, status, timestamp, imagePath, title, description, price, materials, keywords, seoScore, outputDir",
        "additionalFields": {}
      },
      "name": "Save Results to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1050,
        400
      ]
    },
    {
      "parameters": {
        "fromEmail": "notifications@example.com",
        "toEmail": "={{ $json.notificationEmail || 'admin@example.com' }}",
        "subject": "Jewelry Processing Job {{ $json.status === 'success' ? 'Completed' : 'Failed' }}: {{ $json.jobId }}",
        "text": "=Job ID: {{ $json.jobId }}\nStatus: {{ $json.status }}\nTimestamp: {{ $json.timestamp }}\n\n{% if $json.status === 'error' %}\nError: {{ $json.error }}\n{% else %}\nTitle: {{ $json.title }}\nDescription: {{ $json.description }}\nPrice: {{ $json.price }}\nMaterials: {{ $json.materials }}\nSEO Score: {{ $json.seoScore }}\nOutput Directory: {{ $json.outputDir }}\n{% endif %}"
      },
      "name": "Send Notification Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Webhook Data": {
      "main": [
        [
          {
            "node": "Error Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Check": {
      "main": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Save Error to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Save Results to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Error to Database": {
      "main": [
        [
          {
            "node": "Send Notification Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Results to Database": {
      "main": [
        [
          {
            "node": "Send Notification Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}

